#Execution begins at address 0
	.pos	0
Init:
	irmovl	Stack, %esp		#Initialize stack pointer
	irmovl	Stack, %ebp
	jmp		Main
	halt

.align	4
ele1:
		.long 0x00a
		.long ele2
ele2:
		.long 0x0b0
		.long ele3
ele3:	
		.long 0xc00
		.long 0


Main:
		irmovl	ele1,%esi	#p_ele1
		pushl	%esi
		call copy_list	
		halt

copy_list:
		pushl	%ebp
		rrmovl	%esp, %ebp	#read the stack pointer
		pushl	%ebx		#save sbx
		pushl	%ecx		#save ecx
		pushl	%edx		#save sdx
		pushl	%esi		#save esi
		mrmovl	8(%ebp),%edx	#edx=p_ele[i]
		mrmovl	0(%edx),%eax	#eax=ele[i]
		mrmovl	4(%edx),%ebx	#ebx=p_ele[i+1]
		andl	%ebx, %ebx	#if p_ele[i+1] == 0
		je  	done		#return ele[i]
		pushl	%ebx		#else: p_ele[i+1]
		rrmovl  %eax, %ecx	#ecx = ele[i]
		call 	copy_list
		popl	%edx		#restore the stack pointer
		addl	%ecx,%eax	#eax += rsum(p_ele[i+1])
done:					#return
		popl	%esi			#restore the registers
		popl	%edx
		popl 	%ecx
		popl	%ebx
		rrmovl	%ebp, %esp
		popl	%ebp
		ret

		.pos	0x120
Stack:


